"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypescriptFile = exports.TypescriptPackage = exports.TypescriptConstrains = void 0;
const FileAbstraction_1 = __importDefault(require("../../../abstractions/project/FileAbstraction"));
const PackageAbstraction_1 = __importDefault(require("../../../abstractions/project/PackageAbstraction"));
const TSSintaxe_1 = require("./TSSintaxe");
class TypescriptConstrains {
    constructor(name, _type, isFunction, value) {
        this.name = name;
        this._type = _type;
        this.isFunction = isFunction;
        //@ts-ignore
        if (value.getOption != undefined) {
            //@ts-ignore
            let cm = TSSintaxe_1.typescriptSintaxe.defineClassMethod(value);
            this.value = `${cm.declaration}(${cm.arguments}) => { ${cm.body}; }`;
        }
        this.value = value.getName();
    }
    toSintaxe() {
        if (this.isFunction)
            return `export const ${this.name} = ${this.value}`;
        return `export const ${this.name}: ${this._type} = `;
    }
    getBody() {
        return "";
    }
}
exports.TypescriptConstrains = TypescriptConstrains;
class TypescriptPackage extends PackageAbstraction_1.default {
    constructor(name, constrains, classes = [], packages = []) {
        super(name, classes, packages);
        this.constrains = constrains;
    }
}
exports.TypescriptPackage = TypescriptPackage;
class TypescriptFile extends FileAbstraction_1.default {
    constructor(name, dependencies, classes, sintaxe, constrains) {
        super(name, classes, sintaxe);
        this.constrains = constrains;
        this.dependencies = dependencies;
    }
    buildFileContent() {
        return `${this.dependencies}\n\n${this.constrains.map(constrain => constrain.toSintaxe())}\n\n${super.buildFileContent()}`;
    }
}
exports.TypescriptFile = TypescriptFile;
