"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.typescriptSintaxe = exports.TypescriptSintaxe = void 0;
const Sintaxe_1 = __importStar(require("../../../abstractions/language/Sintaxe"));
const Enums_1 = require("../../../abstractions/shared/Enums");
class TypeScriptWrapper {
    wrapModifier(modifier) {
        switch (modifier) {
            case Enums_1.ModifierOptions.STATIC:
                return "static";
            case Enums_1.ModifierOptions.ABSTRACT:
                return "abstract";
            case Enums_1.ModifierOptions.CONCRETE:
                return "";
        }
    }
    wrapVisibility(visibility) {
        switch (visibility) {
            case Enums_1.VisibilityOptions.PUBLIC:
                return "public";
            case Enums_1.VisibilityOptions.PRIVATE:
                return "private";
            case Enums_1.VisibilityOptions.PROTECTED:
                return "protected";
        }
    }
}
const tsWrapper = new TypeScriptWrapper();
class TypeScriptClassImplemetantion {
    classKeyword(clazz) {
        return "class";
    }
    className(clazz) {
        return clazz.getName();
    }
    classVisibility(clazz) {
        return tsWrapper.wrapVisibility(clazz.getVisibility());
    }
    classModifier(clazz) {
        return tsWrapper.wrapModifier(clazz.getModifier());
    }
    attrVisibility(attr) {
        return tsWrapper.wrapVisibility(attr.getVisibility());
    }
    attrModifier(attr) {
        return "";
    }
    attrName(attr) {
        return attr.getName();
    }
    attrType(attr) {
        return attr.getType().getName();
    }
    constructorVisibility(clazz) {
        return "public";
    }
    constructorKeyword(clazz) {
        return "constructor";
    }
    argumentName(arg) {
        return arg.getName();
    }
    argumentType(arg) {
        return arg.getType().getName();
    }
    methodKeyword(method) {
        return "";
    }
    methodVisibility(method) {
        return tsWrapper.wrapVisibility(method.getVisibility());
    }
    methodModifier(method) {
        return "";
    }
    methodName(method) {
        return method.getName();
    }
    methodReturn(method) {
        return method.getReturn().getName();
    }
}
class TypescriptClassImplementationOrder extends Sintaxe_1.ClassImplementationOrder {
    getDeclarationOrder() {
        if (this.clazz == undefined)
            return [];
        return [
            //@ts-ignore
            new Sintaxe_1.ClassImplementationConfigOrder(this.clazz.methodKeyword),
            //@ts-ignore
            new Sintaxe_1.ClassImplementationConfigOrder(this.clazz.methodName, ""),
        ];
    }
    getAttributeDeclarationOrder() {
        if (this.clazz == undefined)
            return [];
        return [
            //@ts-ignore
            new Sintaxe_1.ClassImplementationConfigOrder(this.clazz.attrVisibility),
            //@ts-ignore
            new Sintaxe_1.ClassImplementationConfigOrder(this.clazz.attrModifier),
            //@ts-ignore
            new Sintaxe_1.ClassImplementationConfigOrder(this.clazz.attrName, ": "),
            //@ts-ignore
            new Sintaxe_1.ClassImplementationConfigOrder(this.clazz.attrType, ""),
        ];
    }
    getConstructorDeclarationOrder() {
        if (this.clazz == undefined)
            return [];
        return [
            //@ts-ignore
            new Sintaxe_1.ClassImplementationConfigOrder(this.clazz.constructorVisibility),
            //@ts-ignore
            new Sintaxe_1.ClassImplementationConfigOrder(this.clazz.constructorKeyword, ""),
        ];
    }
    getArggumentDeclarationOrder() {
        if (this.clazz == undefined)
            return [];
        return [
            //@ts-ignore
            new Sintaxe_1.ClassImplementationConfigOrder(this.clazz.argumentName, ": "),
            //@ts-ignore
            new Sintaxe_1.ClassImplementationConfigOrder(this.clazz.argumentType, ""),
        ];
    }
    getMethodsDeclarationOrder() {
        if (this.clazz == undefined)
            return [];
        return [
            //@ts-ignore
            new Sintaxe_1.ClassImplementationConfigOrder(this.clazz.methodVisibility),
            //@ts-ignore
            new Sintaxe_1.ClassImplementationConfigOrder(this.clazz.methodModifier),
            //@ts-ignore
            new Sintaxe_1.ClassImplementationConfigOrder(this.clazz.methodName, ""),
        ];
    }
    getMehodEmptyBody() {
        return "";
    }
}
const typescriptReversedData = {
    startCodeBlock: "{",
    endCodeBlock: "}",
    endLineCode: ";",
    startArgDeclaration: "(",
    endArgDeclaraion: ")",
    separeArgDeclaraion: ",",
    classReference: "this",
    classSubAccess: ".",
};
const typescriptFileData = {
    main: "ts",
    others: ["tsx", "d.ts"]
};
class TypescriptSintaxe extends Sintaxe_1.default {
    constructor() {
        super(new TypescriptClassImplementationOrder(), typescriptReversedData, typescriptFileData);
    }
}
exports.TypescriptSintaxe = TypescriptSintaxe;
exports.typescriptSintaxe = new TypescriptSintaxe();
