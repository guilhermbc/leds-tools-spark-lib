"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileOpenModes = void 0;
const fs = __importStar(require("fs"));
const FolderAlredyExistsError_js_1 = __importDefault(require("../error/FolderAlredyExistsError.js"));
const FolderNotExistsError_js_1 = __importDefault(require("../error/FolderNotExistsError.js"));
const FileAlredyExistsError_js_1 = __importDefault(require("../error/FileAlredyExistsError.js"));
var FileOpenModes;
(function (FileOpenModes) {
    FileOpenModes[FileOpenModes["WriteOrOverwrite"] = 0] = "WriteOrOverwrite";
    FileOpenModes[FileOpenModes["Append"] = 1] = "Append";
})(FileOpenModes || (exports.FileOpenModes = FileOpenModes = {}));
class IOOperationsHandler {
    static createFolder(folderCompleteName, force = true, debug = true) {
        if (fs.existsSync(folderCompleteName)) {
            if (force) {
                console.log(`Warrning, the folder "${folderCompleteName}" alredy exists`);
            }
            else {
                throw new FolderAlredyExistsError_js_1.default(folderCompleteName.toString());
            }
        }
        IOOperationsHandler.error = null;
        let mkDirConf = { recursive: force };
        let mkDirErrorHandler = debug ? IOOperationsHandler.defaultCallBackError : (err) => { };
        fs.mkdir(folderCompleteName, mkDirConf, mkDirErrorHandler);
        if (IOOperationsHandler.error != null) {
            throw IOOperationsHandler.error;
        }
    }
    static createFile(targetFolder, fileName, content, mode = FileOpenModes.WriteOrOverwrite, force = false, debug = true) {
        const fileFullPath = targetFolder.toString().endsWith("/") ? `${targetFolder}${fileName}` : `${targetFolder}/${fileName}`; /** Build the full file name with directory and name. */
        /**
         * Check if the target folder exists.
         * if force == true, create the folder;
         * else return an error.
         */
        if (!fs.existsSync(targetFolder)) {
            if (force) {
                IOOperationsHandler.createFolder(targetFolder, true, debug);
            }
            else {
                throw new FolderNotExistsError_js_1.default(targetFolder.toString());
            }
        }
        /**
         * Check if the file exists in target folder;
         * if not exists, create it.
         */
        if (fs.existsSync(fileFullPath)) {
            /* if force == false, this will trhow an error. It prevent overwrite the file */
            if (!force) {
                throw new FileAlredyExistsError_js_1.default(targetFolder.toString(), fileName.toString(), fileFullPath);
            }
        }
        else {
            IOOperationsHandler.error = null;
            fs.open(fileFullPath, "r+", (err, fd) => { IOOperationsHandler.defaultCallBackError(err, fileName.toString()); });
            if (IOOperationsHandler.error != null) {
                throw IOOperationsHandler.error;
            }
        }
        IOOperationsHandler.error = null;
        switch (mode) {
            case FileOpenModes.WriteOrOverwrite:
                fs.writeFile(fileFullPath, content, () => { IOOperationsHandler.defaultNoParamsCallBack(fileFullPath, debug); });
                if (IOOperationsHandler.error != null)
                    throw IOOperationsHandler.error;
                break;
            case FileOpenModes.Append:
                fs.appendFile(fileFullPath, content, () => { IOOperationsHandler.defaultNoParamsCallBack(fileFullPath, debug); });
                if (IOOperationsHandler.error != null)
                    throw IOOperationsHandler.error;
                break;
        }
    }
    static defaultNoParamsCallBack(fileReference, debug) {
        const text = `Error while creating "${fileReference}"`;
        if (debug) {
            console.error(text);
        }
        IOOperationsHandler.error = new Error(text);
    }
    static defaultCallBackError(err, fileName) {
        if (err) {
            console.error(`Error while creating "${err}"`);
            IOOperationsHandler.error = err;
            return;
        }
        console.log(`Successfull creating of "${fileName}".`);
    }
}
IOOperationsHandler.error = null;
exports.default = IOOperationsHandler;
