"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const IOOperationsHandler_js_1 = __importStar(require("../utils/IOOperationsHandler.js"));
class ProjectAbstraction {
    constructor(name, about, specifications, packages) {
        this.name = name;
        this.about = about;
        this.specifications = specifications;
        this.corePackages = packages;
        this.folders = [];
    }
    createProject(force = true) {
        IOOperationsHandler_js_1.default.createFolder(this.name, true, true);
        IOOperationsHandler_js_1.default.createFile(this.name, "readme.md", this.about, IOOperationsHandler_js_1.FileOpenModes.WriteOrOverwrite, true);
        this.folders = this.specifications.architecture.implement(this.corePackages);
        this.folders.forEach(_package => this.buildPackage(this.name, _package, force));
    }
    buildPackage(targetFolder, _package, force) {
        const packageFolder = `${targetFolder}/${_package.getName()}`;
        IOOperationsHandler_js_1.default.createFolder(packageFolder, force); // Creating the package folders
        _package.getFiles().forEach(file => IOOperationsHandler_js_1.default.createFile(packageFolder, file.buildFileName(), file.buildFileContent(), IOOperationsHandler_js_1.FileOpenModes.WriteOrOverwrite, force)); // Creating each file of package
        _package.getSubfolders().forEach(subfolder => this.buildPackage(packageFolder, subfolder, force));
    }
}
exports.default = ProjectAbstraction;
