"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassImplementationOrder = exports.ClassImplementationConfigOrder = void 0;
class ClassImplementationConfigOrder {
    constructor(func, separator = " ") {
        this.func = func;
        this.separator = separator;
    }
    call(param) {
        return `${this.func(param)}${this.separator}`;
    }
}
exports.ClassImplementationConfigOrder = ClassImplementationConfigOrder;
class ClassImplementationOrder {
    constructor(clazz = null) {
        this.clazz = clazz;
    }
    setClass(clazz) {
        this.clazz = clazz;
    }
}
exports.ClassImplementationOrder = ClassImplementationOrder;
class Sintaxe {
    constructor(clsImpl, reservedData, fileExtensios) {
        this.clsImpl = clsImpl;
        this.reserverData = reservedData;
        this.fileExtensions = fileExtensios;
    }
    buildClassData(clazz) {
        return {
            declaration: this.declareClass(clazz),
            attributes: this.declareClassAttrs(clazz),
            _constructor: this.declareClassConstructor(clazz),
            methods: this.defineClassMethods(clazz),
        };
    }
    declareClass(clazz) {
        return this.clsImpl.getDeclarationOrder().map(order => order.call(clazz)).join("");
    }
    declareClassAttrs(clazz) {
        return clazz.getAttributes().map(attr => this.declareClassAttr(attr));
    }
    declareClassAttr(attr) {
        return this.clsImpl.getAttributeDeclarationOrder().map(order => order.call(attr)).join("");
    }
    declareClassConstructor(clazz) {
        const declaration = this.clsImpl.getConstructorDeclarationOrder().map(order => order.call(clazz)).join("");
        const params = clazz.getAttributes().map(attr => this.decalreArggument(attr.asArgument()));
        const body = clazz.getAttributes().map(attr => this.defineClassAttr(attr));
        return { declaration: declaration, arguments: params, body: body };
    }
    decalreArggument(argg) {
        console.log("JASLKJLASDJLAJSDLJLDASJLSAD");
        return this.clsImpl.getArggumentDeclarationOrder().map(order => order.call(argg)).join("");
    }
    defineClassAttr(attr) {
        return `${this.reserverData.classReference}${this.reserverData.classSubAccess}${attr.getName()}`;
    }
    defineClassMethods(clazz) {
        return clazz.getMethods().map(method => this.defineClassMethod(method));
    }
    defineClassMethod(method) {
        const decalration = this.clsImpl.getMethodsDeclarationOrder().map(order => order.call(method)).join("");
        const args = method.getArguments().map(arg => this.decalreArggument(arg));
        const body = method.getbody();
        return {
            declaration: decalration,
            arguments: args,
            body: body,
        };
    }
}
exports.default = Sintaxe;
